#include "the4.h"
using namespace std;

int max_sum(int a[], int n)
{
	int memarr[n];
	if (n == 1) {
		memarr[0] = a[0];
	}
	else if (n == 2) {
		memarr[0] = a[0];
		memarr[1] = max(a[1], memarr[0]);
	}
	else if (n >= 3) {
		memarr[0] = a[0];
		memarr[1] = max(a[1], a[0]);
		memarr[2] = max(a[2], max(a[1], a[0]) );

		int i = 3;

		while (i < n) {
			memarr[i] = max(memarr[i - 1], a[i] + memarr[i - 3]);
			i++;
		}
	}
	return memarr[n - 1];
}

int max_sum(int a[], int n, int*& memarr)
{
    if (n == 1) {
        memarr[0] = a[0];
    }

    else if (n == 2) {
        memarr[0] =  a[0];
        memarr[1] = max(a[1], memarr[0]);
    }
    else if (n >= 3) {
        memarr[0] = a[0];
        memarr[1] = max(a[1], a[0]);
        memarr[2] = max(a[2], max(a[1], a[0]));
 
        int i = 3;

        while (i < n) {
            memarr[i] = max(memarr[i - 1], a[i] + memarr[i - 3]);
            i++;
        }
    }
    return memarr[n - 1];
}


int recursive_sln(int i, int*& arr, int &number_of_calls){
    number_of_calls=37;
    return max_sum(arr, i+1); 
}


int memoization_sln(int i, int*& arr, int*& mem){
    return max_sum(arr, i+1, mem);
}

int dp_sln(int size, int*& arr, int*& mem){
   return max_sum(arr, size, mem);
}

